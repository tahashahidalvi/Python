steps:
  # Step 1: Build and push the first Docker image using Dockerfile.app1
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-f', 'Dockerfile.app1', '-t', 'us-west4-docker.pkg.dev/development-437521/test-deployment/app1:latest', '.']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-west4-docker.pkg.dev/development-437521/test-deployment/app1:latest']

  # Step 2: Build and push the second Docker image using Dockerfile.app2
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-f', 'Dockerfile.app2', '-t', 'us-west4-docker.pkg.dev/development-437521/test-deployment/app2:latest', '.']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-west4-docker.pkg.dev/development-437521/test-deployment/app2:latest']

  # Step 3: Recreate the instances in the Managed Instance Group (MIG)
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'compute'
      - 'instance-groups'
      - 'managed'
      - 'rolling-action'
      - 'restart'
      - 'instance-group-1'
      - '--region=us-central1'

  # Step 4: Restart a specific instance if it is in the running state
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        INSTANCE_NAME="${_INSTANCE_NAME}"  # Uses custom substitution
        ZONE="${_ZONE}"  # Uses custom substitution
        STATUS=$(gcloud compute instances describe $INSTANCE_NAME --zone=$ZONE --format='get(status)')
        if [ "$STATUS" = "RUNNING" ]; then
          gcloud compute instances reset $INSTANCE_NAME --zone=$ZONE
        else
          echo "Instance $INSTANCE_NAME is not in RUNNING state. Current state: $STATUS"
        fi

# Define the images being built and pushed
images:
  - 'us-west4-docker.pkg.dev/development-437521/test-deployment/app1:latest'
  - 'us-west4-docker.pkg.dev/development-437521/test-deployment/app2:latest'

substitutions:
  _INSTANCE_NAME: "instance-20241009-184712"  # Custom value
  _ZONE: "us-central1-a"  # Custom value

